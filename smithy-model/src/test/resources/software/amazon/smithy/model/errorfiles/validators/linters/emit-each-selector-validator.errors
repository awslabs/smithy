[DANGER] ns.foo#String: Selector capture matched selector: > | valid-neighbor-only
[DANGER] ns.foo#String: Selector capture matched selector: [id='ns.foo#String'] | shapeId
[DANGER] ns.foo#String: Selector capture matched selector: [id=ns.foo#String] | shapeId
[DANGER] ns.foo#String: Selector capture matched selector: [id|name="String"] | shapeName
[DANGER] ns.foo#String: Selector capture matched selector: [id|name='String'] | shapeName
[DANGER] ns.foo#String: Selector capture matched selector: simpleType | simpleType
[DANGER] ns.foo#Integer: Selector capture matched selector: > | valid-neighbor-only
[DANGER] ns.foo#Integer: Selector capture matched selector: integer | integer
[DANGER] ns.foo#Integer: Selector capture matched selector: number | number
[DANGER] ns.foo#Integer: Selector capture matched selector: simpleType | simpleType
[DANGER] ns.foo#Long: Selector capture matched selector: :is(long, float, boolean) | any
[DANGER] ns.foo#Long: Selector capture matched selector: long | long
[DANGER] ns.foo#Long: Selector capture matched selector: number | number
[DANGER] ns.foo#Long: Selector capture matched selector: simpleType | simpleType
[NOTE] ns.foo#Long: The long shape is not connected to from any service shape. | UnreferencedShape
[DANGER] ns.foo#Float: Selector capture matched selector: :is(long, float, boolean) | any
[DANGER] ns.foo#Float: Selector capture matched selector: float | float
[DANGER] ns.foo#Float: Selector capture matched selector: number | number
[DANGER] ns.foo#Float: Selector capture matched selector: simpleType | simpleType
[NOTE] ns.foo#Float: The float shape is not connected to from any service shape. | UnreferencedShape
[DANGER] ns.foo#Boolean: Selector capture matched selector: :is(long, float, boolean) | any
[DANGER] ns.foo#Boolean: Selector capture matched selector: boolean | boolean
[DANGER] ns.foo#Boolean: Selector capture matched selector: simpleType | simpleType
[NOTE] ns.foo#Boolean: The boolean shape is not connected to from any service shape. | UnreferencedShape
[DANGER] ns.foo#Blob: Selector capture matched selector: [trait|mediaType$='plain'] | traitEndsWith
[DANGER] ns.foo#Blob: Selector capture matched selector: [trait|mediaType*='PLAIN' i] | traitContainsCaseInsensitive
[DANGER] ns.foo#Blob: Selector capture matched selector: [trait|mediaType*='plain'] | traitContains
[DANGER] ns.foo#Blob: Selector capture matched selector: [trait|mediaType='TEXT/PLAIN' i] | traitEqualToCaseInsensitive
[DANGER] ns.foo#Blob: Selector capture matched selector: [trait|mediaType='text/plain'] | traitEqualTo
[DANGER] ns.foo#Blob: Selector capture matched selector: [trait|mediaType] | traitExists
[DANGER] ns.foo#Blob: Selector capture matched selector: [trait|mediaType^='text'] | traitStartsWith
[DANGER] ns.foo#Blob: Selector capture matched selector: [trait|mediaType^=TEXT  i] | traitEqualToCaseInsensitiveNoQuotes
[DANGER] ns.foo#Blob: Selector capture matched selector: [trait|smithy.api#mediaType*=plain] | traitContains
[DANGER] ns.foo#Blob: Selector capture matched selector: blob | blob
[DANGER] ns.foo#Blob: Selector capture matched selector: simpleType | simpleType
[NOTE] ns.foo#Blob: The blob shape is not connected to from any service shape. | UnreferencedShape
[DANGER] ns.foo#List: Selector capture matched selector: :not(:is([trait|error], simpleType)) | not
[DANGER] ns.foo#List: Selector capture matched selector: list | list
[NOTE] ns.foo#List: The list shape is not connected to from any service shape. | UnreferencedShape
[DANGER] ns.foo#List$member: Selector capture matched selector: :not(:is([trait|error], simpleType)) | not
[DANGER] ns.foo#List$member: Selector capture matched selector: :test(member > [id='ns.foo#String']) | memberTargetsString
[DANGER] ns.foo#List$member: Selector capture matched selector: > | valid-neighbor-only
[DANGER] ns.foo#List$member: Selector capture matched selector: member | member
[DANGER] ns.foo#Map: Selector capture matched selector: :not(:is([trait|error], simpleType)) | not
[DANGER] ns.foo#Map: Selector capture matched selector: > | valid-neighbor-only
[DANGER] ns.foo#Map: Selector capture matched selector: map | map
[DANGER] ns.foo#Map$key: Selector capture matched selector: :not(:is([trait|error], simpleType)) | not
[DANGER] ns.foo#Map$key: Selector capture matched selector: :test(member > [id='ns.foo#String']) | memberTargetsString
[DANGER] ns.foo#Map$key: Selector capture matched selector: > | valid-neighbor-only
[DANGER] ns.foo#Map$key: Selector capture matched selector: member | member
[DANGER] ns.foo#Map$value: Selector capture matched selector: :not(:is([trait|error], simpleType)) | not
[DANGER] ns.foo#Map$value: Selector capture matched selector: :test(member > [id='ns.foo#String']) | memberTargetsString
[DANGER] ns.foo#Map$value: Selector capture matched selector: > | valid-neighbor-only
[DANGER] ns.foo#Map$value: Selector capture matched selector: member | member
[DANGER] ns.foo#MyService: Selector capture matched selector: :not(:is([trait|error], simpleType)) | not
[DANGER] ns.foo#MyService: Selector capture matched selector: > | valid-neighbor-only
[DANGER] ns.foo#MyService: Selector capture matched selector: [service|version^=2017] | serviceVersion
[DANGER] ns.foo#MyResource: Selector capture matched selector: :not(:is([trait|error], simpleType)) | not
[DANGER] ns.foo#MyResource: Selector capture matched selector: > | valid-neighbor-only
[DANGER] ns.foo#MyResource: Selector capture matched selector: resource | resource
[DANGER] ns.foo#MyResource: Selector capture matched selector: service -[resource]-> resource | serviceChild
[DANGER] ns.foo#MyResourceIdentifier: Selector capture matched selector: > | valid-neighbor-only
[DANGER] ns.foo#MyResourceIdentifier: Selector capture matched selector: resource -[identifier]-> string | identifier
[DANGER] ns.foo#MyResourceIdentifier: Selector capture matched selector: simpleType | simpleType
[DANGER] ns.foo#OperationA: Selector capture matched selector: :not(:is([trait|error], simpleType)) | not
[DANGER] ns.foo#OperationA: Selector capture matched selector: > | valid-neighbor-only
[DANGER] ns.foo#OperationA: Selector capture matched selector: operation | operation
[DANGER] ns.foo#OperationAInput: Selector capture matched selector: :not(:is([trait|error], simpleType)) | not
[DANGER] ns.foo#OperationAInput: Selector capture matched selector: > | valid-neighbor-only
[DANGER] ns.foo#OperationAInput$memberName: Selector capture matched selector: :not(:is([trait|error], simpleType)) | not
[DANGER] ns.foo#OperationAInput$memberName: Selector capture matched selector: :test(member > [id='ns.foo#String']) | memberTargetsString
[DANGER] ns.foo#OperationAInput$memberName: Selector capture matched selector: > | valid-neighbor-only
[DANGER] ns.foo#OperationAInput$memberName: Selector capture matched selector: [id|member=memberName] | shapeMember
[DANGER] ns.foo#OperationAInput$memberName: Selector capture matched selector: member | member
[DANGER] ns.foo#OperationAInput$otherMemberName: Selector capture matched selector: :not(:is([trait|error], simpleType)) | not
[DANGER] ns.foo#OperationAInput$otherMemberName: Selector capture matched selector: > | valid-neighbor-only
[DANGER] ns.foo#OperationAInput$otherMemberName: Selector capture matched selector: member | member
[DANGER] ns.foo#OperationAOutput: Selector capture matched selector: :not(:is([trait|error], simpleType)) | not
[DANGER] ns.foo#OperationAOutput: Selector capture matched selector: > | valid-neighbor-only
[DANGER] ns.foo#OperationAOutput$b: Selector capture matched selector: :not(:is([trait|error], simpleType)) | not
[DANGER] ns.foo#OperationAOutput$b: Selector capture matched selector: > | valid-neighbor-only
[DANGER] ns.foo#OperationAOutput$b: Selector capture matched selector: member | member
[DANGER] ns.foo#OperationErrorA: Selector capture matched selector: > | valid-neighbor-only
[DANGER] ns.foo#OperationErrorB: Selector capture matched selector: > | valid-neighbor-only
[DANGER] ns.foo#OperationB: Selector capture matched selector: :not(:is([trait|error], simpleType)) | not
[DANGER] ns.foo#OperationB: Selector capture matched selector: > | valid-neighbor-only
[DANGER] ns.foo#OperationB: Selector capture matched selector: operation | operation
[DANGER] ns.foo#OperationBInput: Selector capture matched selector: :not(:is([trait|error], simpleType)) | not
[DANGER] ns.foo#OperationBInput: Selector capture matched selector: > | valid-neighbor-only
[DANGER] ns.foo#OperationBInput$id: Selector capture matched selector: :not(:is([trait|error], simpleType)) | not
[DANGER] ns.foo#OperationBInput$id: Selector capture matched selector: > | valid-neighbor-only
[DANGER] ns.foo#OperationBInput$id: Selector capture matched selector: member | member
[DANGER] ns.foo#UtcTimestamp: Selector capture matched selector: simpleType | simpleType
[NOTE] ns.foo#UtcTimestamp: The timestamp shape is not connected to from any service shape. | UnreferencedShape
[DANGER] other.ns#String: Selector capture matched selector: [id|name="String"] | shapeName
[DANGER] other.ns#String: Selector capture matched selector: [id|name='String'] | shapeName
[DANGER] other.ns#String: Selector capture matched selector: simpleType | simpleType
[NOTE] other.ns#String: The string shape is not connected to from any service shape. | UnreferencedShape
[ERROR] -: Error creating `EmitEachSelector` validator: Deserialization error at (/selector): unable to create software.amazon.smithy.model.selector.Selector from "": Unable to deserialize Node using fromNode method: Syntax error at character 0 of 0, near ``: Unexpected selector EOF; expression:  | Model
[ERROR] -: Error creating `EmitEachSelector` validator: Deserialization error at (/selector): unable to create software.amazon.smithy.model.selector.Selector from "!": Unable to deserialize Node using fromNode method: Syntax error at character 0 of 1, near `!`: Unexpected selector character: !; expression: ! | Model
[ERROR] -: Error creating `EmitEachSelector` validator: Deserialization error at (/selector): unable to create software.amazon.smithy.model.selector.Selector from "'foo'": Unable to deserialize Node using fromNode method: Syntax error at character 0 of 5, near `'foo'`: Unexpected selector character: '; expression: 'foo' | Model
[ERROR] -: Error creating `EmitEachSelector` validator: Deserialization error at (/selector): unable to create software.amazon.smithy.model.selector.Selector from "\"foo\"": Unable to deserialize Node using fromNode method: Syntax error at character 0 of 5, near `"foo"`: Unexpected selector character: "; expression: "foo" | Model
[ERROR] -: Error creating `EmitEachSelector` validator: Deserialization error at (/selector): unable to create software.amazon.smithy.model.selector.Selector from "invalid": Unable to deserialize Node using fromNode method: Syntax error at character 7 of 7, near ``: Unknown shape type: invalid; expression: invalid | Model
[ERROR] -: Error creating `EmitEachSelector` validator: Deserialization error at (/selector): unable to create software.amazon.smithy.model.selector.Selector from "[]": Unable to deserialize Node using fromNode method: Syntax error at character 1 of 2, near `]`: Invalid attribute start character `]`; expression: [] | Model
[ERROR] -: Error creating `EmitEachSelector` validator: Deserialization error at (/selector): unable to create software.amazon.smithy.model.selector.Selector from "[foo|]": Unable to deserialize Node using fromNode method: Syntax error at character 5 of 6, near `]`: Invalid attribute start character `]`; expression: [foo|] | Model
[ERROR] -: Error creating `EmitEachSelector` validator: Deserialization error at (/selector): unable to create software.amazon.smithy.model.selector.Selector from "[|]": Unable to deserialize Node using fromNode method: Syntax error at character 1 of 3, near `|]`: Invalid attribute start character `|`; expression: [|] | Model
[ERROR] -: Error creating `EmitEachSelector` validator: Deserialization error at (/selector): unable to create software.amazon.smithy.model.selector.Selector from "[a=]": Unable to deserialize Node using fromNode method: Syntax error at character 3 of 4, near `]`: Invalid attribute start character `]`; expression: [a=] | Model
[ERROR] -: Error creating `EmitEachSelector` validator: Deserialization error at (/selector): unable to create software.amazon.smithy.model.selector.Selector from "[a=b": Unable to deserialize Node using fromNode method: Syntax error at character 4 of 4, near ``: Expected one of the following tokens: ']'; expression: [a=b | Model
[ERROR] -: Error creating `EmitEachSelector` validator: Deserialization error at (/selector): unable to create software.amazon.smithy.model.selector.Selector from "string=b": Unable to deserialize Node using fromNode method: Syntax error at character 6 of 8, near `=b`: Unexpected selector character: =; expression: string=b | Model
[ERROR] -: Error creating `EmitEachSelector` validator: Deserialization error at (/selector): unable to create software.amazon.smithy.model.selector.Selector from "[foo=']": Unable to deserialize Node using fromNode method: Syntax error at character 6 of 7, near `]`: Expected ' to close ]; expression: [foo='] | Model
[ERROR] -: Error creating `EmitEachSelector` validator: Deserialization error at (/selector): unable to create software.amazon.smithy.model.selector.Selector from "[foo=\"]": Unable to deserialize Node using fromNode method: Syntax error at character 6 of 7, near `]`: Expected " to close ]; expression: [foo="] | Model
[ERROR] -: Error creating `EmitEachSelector` validator: Deserialization error at (/selector): unable to create software.amazon.smithy.model.selector.Selector from "[foo==value]": Unable to deserialize Node using fromNode method: Syntax error at character 5 of 12, near `=value]`: Invalid attribute start character `=`; expression: [foo==value] | Model
[ERROR] -: Error creating `EmitEachSelector` validator: Deserialization error at (/selector): unable to create software.amazon.smithy.model.selector.Selector from "[foo^foo]": Unable to deserialize Node using fromNode method: Syntax error at character 5 of 9, near `foo]`: Expected one of the following tokens: '='; expression: [foo^foo] | Model
[ERROR] -: Error creating `EmitEachSelector` validator: Deserialization error at (/selector): unable to create software.amazon.smithy.model.selector.Selector from ":is(:not(string) > list": Unable to deserialize Node using fromNode method: Syntax error at character 23 of 23, near ``: Expected one of the following tokens: ')' ','; expression: :is(:not(string) > list | Model
[ERROR] -: Error creating `EmitEachSelector` validator: Deserialization error at (/selector): unable to create software.amazon.smithy.model.selector.Selector from "foo -[]->": Unable to deserialize Node using fromNode method: Syntax error at character 3 of 9, near ` -[]->`: Unknown shape type: foo; expression: foo -[]-> | Model
[ERROR] -: Error creating `EmitEachSelector` validator: Deserialization error at (/selector): unable to create software.amazon.smithy.model.selector.Selector from "foo -[input]->": Unable to deserialize Node using fromNode method: Syntax error at character 3 of 14, near ` -[input]->`: Unknown shape type: foo; expression: foo -[input]-> | Model
[ERROR] -: Error creating `EmitEachSelector` validator: Deserialization error at (/selector): unable to create software.amazon.smithy.model.selector.Selector from ":not": Unable to deserialize Node using fromNode method: Syntax error at character 4 of 4, near ``: Expected one of the following tokens: '('; expression: :not | Model
[ERROR] -: Error creating `EmitEachSelector` validator: Deserialization error at (/selector): unable to create software.amazon.smithy.model.selector.Selector from ":not(": Unable to deserialize Node using fromNode method: Syntax error at character 5 of 5, near ``: Unexpected selector EOF; expression: :not( | Model
[ERROR] -: Error creating `EmitEachSelector` validator: Deserialization error at (/selector): unable to create software.amazon.smithy.model.selector.Selector from ":not()": Unable to deserialize Node using fromNode method: Syntax error at character 5 of 6, near `)`: Unexpected selector character: ); expression: :not() | Model
[ERROR] -: Error creating `EmitEachSelector` validator: Deserialization error at (/selector): unable to create software.amazon.smithy.model.selector.Selector from ":not(string": Unable to deserialize Node using fromNode method: Syntax error at character 11 of 11, near ``: Expected one of the following tokens: ')' ','; expression: :not(string | Model
[ERROR] -: Error creating `EmitEachSelector` validator: Deserialization error at (/selector): unable to create software.amazon.smithy.model.selector.Selector from ":is": Unable to deserialize Node using fromNode method: Syntax error at character 3 of 3, near ``: Expected one of the following tokens: '('; expression: :is | Model
[ERROR] -: Error creating `EmitEachSelector` validator: Deserialization error at (/selector): unable to create software.amazon.smithy.model.selector.Selector from ":is(": Unable to deserialize Node using fromNode method: Syntax error at character 4 of 4, near ``: Unexpected selector EOF; expression: :is( | Model
[ERROR] -: Error creating `EmitEachSelector` validator: Deserialization error at (/selector): unable to create software.amazon.smithy.model.selector.Selector from ":nay()": Unable to deserialize Node using fromNode method: Syntax error at character 5 of 6, near `)`: Unexpected selector character: ); expression: :nay() | Model
[ERROR] -: Error creating `EmitEachSelector` validator: Deserialization error at (/selector): unable to create software.amazon.smithy.model.selector.Selector from ":is(string": Unable to deserialize Node using fromNode method: Syntax error at character 10 of 10, near ``: Expected one of the following tokens: ')' ','; expression: :is(string | Model
[ERROR] -: Error creating `EmitEachSelector` validator: Deserialization error at (/selector): unable to create software.amazon.smithy.model.selector.Selector from ":is(string, ": Unable to deserialize Node using fromNode method: Syntax error at character 12 of 12, near ``: Unexpected selector EOF; expression: :is(string,  | Model
[ERROR] -: Error creating `EmitEachSelector` validator: Deserialization error at (/selector): unable to create software.amazon.smithy.model.selector.Selector from ":is(string, )": Unable to deserialize Node using fromNode method: Syntax error at character 12 of 13, near `)`: Unexpected selector character: ); expression: :is(string, ) | Model
[ERROR] -: Error creating `EmitEachSelector` validator: Deserialization error at (/selector): unable to create software.amazon.smithy.model.selector.Selector from ":is(string, :not())": Unable to deserialize Node using fromNode method: Syntax error at character 17 of 19, near `))`: Unexpected selector character: ); expression: :is(string, :not()) | Model
