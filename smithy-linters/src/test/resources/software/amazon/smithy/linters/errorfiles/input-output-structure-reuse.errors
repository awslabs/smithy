[DANGER] (InputOutputStructureReuse) ns.foo#AInput / [0, 0]: Referencing the same input structure from multiple operations can lead to backward-compatibility problems in the future if the inputs ever need to diverge. By using the same structure, you are unnecessarily tying the interfaces of these operations together. This structure isreferenced as input by the following operations: [`ns.foo#A`, `ns.foo#B`]
[DANGER] (InputOutputStructureReuse) ns.foo#AOutput / [0, 0]: Referencing the same output structure from multiple operations can lead to backward-compatibility problems in the future if the outputs ever need to diverge. By using the same structure, you are unnecessarily tying the interfaces of these operations together. This structure isreferenced as output by the following operations: [`ns.foo#A`, `ns.foo#B`]
[DANGER] (InputOutputStructureReuse) ns.foo#CInputOutput / [0, 0]: Using the same structure for both input and output can lead to backward-compatibility problems in the future if the members or traits used in input needs to diverge from those used in output. It is always better to use structures that are exclusively used as input or exclusively used as output, and it is typically best to not share these structures across multiple operations. This structure is used as input in the following operations: [`ns.foo#C`]. It is used as output in the following operations: [`ns.foo#C`]
[DANGER] (InputOutputStructureReuse) ns.foo#DInputOutput / [0, 0]: Referencing the same input structure from multiple operations can lead to backward-compatibility problems in the future if the inputs ever need to diverge. By using the same structure, you are unnecessarily tying the interfaces of these operations together. This structure isreferenced as input by the following operations: [`ns.foo#D`, `ns.foo#F`]
[DANGER] (InputOutputStructureReuse) ns.foo#DInputOutput / [0, 0]: Referencing the same output structure from multiple operations can lead to backward-compatibility problems in the future if the outputs ever need to diverge. By using the same structure, you are unnecessarily tying the interfaces of these operations together. This structure isreferenced as output by the following operations: [`ns.foo#D`, `ns.foo#E`]
[DANGER] (InputOutputStructureReuse) ns.foo#DInputOutput / [0, 0]: Using the same structure for both input and output can lead to backward-compatibility problems in the future if the members or traits used in input needs to diverge from those used in output. It is always better to use structures that are exclusively used as input or exclusively used as output, and it is typically best to not share these structures across multiple operations. This structure is used as input in the following operations: [`ns.foo#D`, `ns.foo#F`]. It is used as output in the following operations: [`ns.foo#D`, `ns.foo#E`]
