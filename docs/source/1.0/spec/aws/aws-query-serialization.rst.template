-----------------
Protocol Behavior
-----------------

Every request for the |quoted shape name| protocol MUST be sent to the
root URL (``/``) using the HTTP "POST" method.

The |quoted shape name| protocol does not support custom HTTP bindings.
:ref:`HTTP binding traits <http-traits>` MUST be ignored if they are present.

The |quoted shape name| protocol uses the following headers:

.. list-table::
    :header-rows: 1
    :widths: 20 20 80

    * - Header
      - Required
      - Description
    * - ``Content-Type``
      - true
      - This header uses the static values of ``application/x-www-form-urlencoded``
        for requests and ``text/xml`` for responses.
    * - ``Content-Length``
      - true
      - The standard ``Content-Length`` header defined by
        `RFC 7230 Section 3.3.2`_.


---------------------
Request serialization
---------------------

The |quoted shape name| protocol serializes inputs in ``x-www-form-urlencoded``
request bodies. All keys and values MUST be encoded according to :rfc:`3986`.
Requests MUST have the following key value pairs added to the inputs in the
serialized body:

.. list-table::
    :header-rows: 1
    :widths: 30 70

    * - Key
      - Value
    * - ``Action``
      - The :token:`shape name <identifier>` of the operation's :ref:`shape-id`.
    * - ``Version``
      - The value of the :ref:`"version" property of the service <service>`.

These, along with other input members, are serialized in the request body,
concatenated with the following rules:

* "&" is used to separate member key-value pairs.
* "=" is used to separate member keys from values.
* "." is used to separate member name segments within keys.

x-www-form-urlencoded shape serialization
-----------------------------------------

Simple shapes are serialized according to the following rules:

.. list-table::
    :header-rows: 1
    :widths: 25 75

    * - Smithy type
      - Request entity
    * - ``blob``
      - Text value that is base64 encoded.
    * - ``boolean``
      - Text value of either "true" or "false".
    * - ``byte``
      - Text value of the number.
    * - ``short``
      - Text value of the number.
    * - ``integer``
      - Text value of the number.
    * - ``long``
      - Text value of the number.
    * - ``float``
      - Text value of the number.
    * - ``double``
      - Text value of the number.
    * - ``bigDecimal``
      - Text value of the number, using scientific notation if an exponent is
        needed. Unfortunately, many parsers will either truncate the value or be
        unable to parse numbers that exceed the size of a double.
    * - ``bigInteger``
      - Text value of the number, using scientific notation if an exponent is
        needed. Unfortunately, many parsers will either truncate the value or be
        unable to parse numbers that exceed the size of a double.
    * - ``string``
      - UTF-8 value of the string. Empty strings are serialized as empty
        values, meaning a ``Foo`` member set to an empty string would be
        serialized as "&Foo=".
    * - ``timestamp``
      - Text value of the timestamp. This protocol uses ``date-time`` as the
        default serialization. However, the :ref:`timestampFormat <timestampFormat-trait>`
        MAY be used to customize timestamp serialization.
    * - ``document``
      - Undefined. Document shapes are not supported in this protocol.

Aggregate shapes are serialized with additional segments for members appended
to the input's key.

.. |query collection text| replace::
    Each value provided in the collection is serialized as a separate key with
    a "." separator, the string "member", a "." separator, and a "1" indexed
    incrementing counter appended to the container's key.
    |name resolution text| instead of "member". The :ref:`xmlFlattened-trait`
    can be used to unwrap the values into a containing structure or union,
    with the key not containing the initial "." separator and ``member``
    segment.
.. |query map text| replace::
    Each key and value in each pair provided in the map is serialized as a
    separate key with a "." separator, the string "entry", a "." separator,
    a "1" indexed incrementing counter, a "." separator, and the string
    "key" or "value" (for member keys or values, respectively) appended to
    the container's key. |name resolution text| instead of "member", "key",
    or "value". The :ref:`xmlFlattened-trait` can be used to unwrap the
    values into a containing structure or union, with the key not
    containing the initial "." separator and "entry" segment.
.. |query aggregate text| replace::
    Each member value provided for the shape is serialized as a separate key
    with a "." separator and the member name appended to the container's key.
    |name resolution text|. Members with null values are not serialized.

.. list-table::
    :header-rows: 1
    :widths: 25 75

    * - Smithy type
      - Request entity
    * - ``list``
      - |query collection text|
    * - ``set``
      - A set is serialized identically to a ``list`` shape, but only contains
        unique values.
    * - ``map``
      - |query map text|
    * - ``structure``
      - |query aggregate text|
    * - ``union``
      - A union is serialized identically to a ``structure`` shape, but only a
        single member can be set to a non-null value.

.. _`RFC 7230 Section 3.3.2`: https://tools.ietf.org/html/rfc7230#section-3.3.2
